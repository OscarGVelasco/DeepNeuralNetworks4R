% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepNeuralNetwork.training.r
\name{deepNeuralNetwork.training}
\alias{deepNeuralNetwork.training}
\title{Train the Deep Neural Network to obtain a regression model.}
\usage{
deepNeuralNetwork.training(x, y, model = NULL, traindata = data,
  testdata = NULL, iterations = 2000, minError = 0.01,
  maxError = 0.05, lr = 0.01, reg = 0.001, display = 100,
  random.seed = 1, standarization = NULL, savePlotIteration = FALSE)
}
\arguments{
\item{x}{Numeric Vector. Specifies the columns of the data that will be used as the input variables to predict y value.}

\item{y}{NUmeric, or Vector. Specifies the column (or columns) of the observed variable, the output that can be predicted using x.}

\item{model}{An object of class DeepNNModel containing an initialized model.}

\item{traindata}{Matrix or Data Frame. The actual data with explanatory variables (x) and observed results (y) that will be used for training.}

\item{testdata}{Matrix or Data Frame (optional). If provided, the algorithm will check for overfitting using the testdata as a input.}

\item{iterations}{Numeric. Number of training iterations.}

\item{minError}{Numeric.}

\item{maxError}{Numeric. Maximun Error permited on training data to chose best model.}

\item{lr}{Numeric. Initial Learning rate. During training it is automatically adjusted using adagrad.}

\item{reg}{Numeric. Regularization rate.}

\item{display}{Numeric. Show training results each [N] iterations.}

\item{random.seed}{Numeric. deprecated.}

\item{standarization}{Character or list. Standarization method to be use. If a list of features (corresponding to rows in the input matrix) is
supplied, a standarization feature-z-score is done. "r"=robust median z-score. "s"=standar mean z-score.}

\item{savePlotIteration}{Boolean. If TRUE saves the plot that is shown every [N] iterations specified by [display].}
}
\value{
A DeepNNModel object with the trained regression model with the parameters as specified by the user.
}
\description{
`deepNeuralNetwork.training()` will train the Deep Neural Network built by [build.dnn] function. A dataset must be
passed in order to train the DNN, x= columns of the data , y = columns of known results that can be predicted using x
}
\details{
This function trains a deep neural network previously created and initialized by [deepNeuralNetwork.build].
}
\examples{
dnn.model <- deepNeuralNetwork.build(x=c(1,2,4,5),y=3, outputNeurons = 1,
                                     HidenLayerNeurons = c(30,10,3),traindata=data,
                                     random.seed = 1, drawDNN = 0)
}
